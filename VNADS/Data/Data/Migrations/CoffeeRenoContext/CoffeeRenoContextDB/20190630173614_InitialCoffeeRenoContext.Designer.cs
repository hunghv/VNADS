// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Data.Migrations.CoffeeRenoContext.CoffeeRenoContextDB
{
    [DbContext(typeof(Context.CoffeeRenoContext))]
    [Migration("20190630173614_InitialCoffeeRenoContext")]
    partial class InitialCoffeeRenoContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Data.Entities.AdsForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdsTypeId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AdsTypeId");

                    b.ToTable("VNADS_AdsForm");
                });

            modelBuilder.Entity("Data.Entities.AdsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("VNADS_AdsType");
                });

            modelBuilder.Entity("Data.Entities.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("VNADS_ApplicationLanguage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2595),
                            DisplayName = "English",
                            Icon = "famfamfam-flags gb",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "en"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2615),
                            DisplayName = "العربية",
                            Icon = "famfamfam-flags sa",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "ar"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2616),
                            DisplayName = "German",
                            Icon = "famfamfam-flags de",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "de"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2618),
                            DisplayName = "Italiano",
                            Icon = "famfamfam-flags it",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "it"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2619),
                            DisplayName = "Français",
                            Icon = "famfamfam-flags fr",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "fr"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2623),
                            DisplayName = "Português",
                            Icon = "famfamfam-flags br",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "pt-BR"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2625),
                            DisplayName = "Türkçe",
                            Icon = "famfamfam-flags tr",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "tr"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2626),
                            DisplayName = "Русский",
                            Icon = "famfamfam-flags ru",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "ru"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2627),
                            DisplayName = "简体中文",
                            Icon = "famfamfam-flags cn",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "zh-Hans"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2629),
                            DisplayName = "Español México",
                            Icon = "famfamfam-flags mx",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "es-MX"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2630),
                            DisplayName = "Nederlands",
                            Icon = "famfamfam-flags nl",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "nl"
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2631),
                            DisplayName = "日本語",
                            Icon = "famfamfam-flags jp",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "ja"
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 252, DateTimeKind.Local).AddTicks(2633),
                            DisplayName = "Viet Nam",
                            Icon = "famfamfam-flags vn",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "vn"
                        });
                });

            modelBuilder.Entity("Data.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("VNADS_Image");
                });

            modelBuilder.Entity("Data.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdsFormId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PostTypeId");

                    b.Property<float>("Price");

                    b.Property<string>("PriceDescription")
                        .HasMaxLength(50);

                    b.Property<string>("Property1")
                        .HasMaxLength(50);

                    b.Property<string>("Property2")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<int>("UserProfileId");

                    b.Property<string>("UserProfileId1");

                    b.HasKey("Id");

                    b.HasIndex("AdsFormId");

                    b.HasIndex("PostTypeId");

                    b.HasIndex("UserProfileId1");

                    b.ToTable("VNADS_Post");
                });

            modelBuilder.Entity("Data.Entities.PostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("ImageId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PostId");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("PostId");

                    b.ToTable("VNADS_PostImage");
                });

            modelBuilder.Entity("Data.Entities.PostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("VNADS_PostType");
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("VNADS_Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 249, DateTimeKind.Local).AddTicks(7937),
                            IsDeleted = false,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 250, DateTimeKind.Local).AddTicks(5326),
                            IsDeleted = false,
                            Name = "Poster"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 7, 1, 0, 36, 14, 250, DateTimeKind.Local).AddTicks(5338),
                            IsDeleted = false,
                            Name = "Normal User"
                        });
                });

            modelBuilder.Entity("Data.Entities.UserLoginHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccessToken");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsAppToken");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLoggedOut");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("UserId");

                    b.Property<string>("UserId1");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("VNADS_UserLoginHistory");
                });

            modelBuilder.Entity("Data.Entities.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool?>("Active");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255);

                    b.Property<string>("Domain");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(255);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NickName");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<bool?>("ReceiveEmail");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(30);

                    b.Property<byte[]>("ThumbnailPhoto");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("VNADS_UserProfile");
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("RoleId");

                    b.Property<int>("UserProfileId");

                    b.Property<string>("UserProfileId1");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserProfileId1");

                    b.ToTable("VNADS_UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Data.Entities.AdsForm", b =>
                {
                    b.HasOne("Data.Entities.AdsType", "AdsType")
                        .WithMany("AdsFroms")
                        .HasForeignKey("AdsTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.Post", b =>
                {
                    b.HasOne("Data.Entities.AdsForm", "AdsForm")
                        .WithMany("Posts")
                        .HasForeignKey("AdsFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.PostType", "PostType")
                        .WithMany("Posts")
                        .HasForeignKey("PostTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.UserProfile", "UserProfile")
                        .WithMany("Posts")
                        .HasForeignKey("UserProfileId1");
                });

            modelBuilder.Entity("Data.Entities.PostImage", b =>
                {
                    b.HasOne("Data.Entities.Image", "Image")
                        .WithMany("PostImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.UserLoginHistory", b =>
                {
                    b.HasOne("Data.Entities.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.HasOne("Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.UserProfile", "UserProfile")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserProfileId1");
                });
#pragma warning restore 612, 618
        }
    }
}
